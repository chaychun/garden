---
import Widget from "@/components/widgets/Widget.astro";
import ImageSwapMedia from "@/components/widgets/image-swap-media";
import { getCldImageUrl, getCldVideoUrl } from "astro-cloudinary/helpers";

interface VideoVariantProps {
	type: "video";
	previewVideo: string;
}

interface ImageVariantProps {
	type: "image";
	previewImage: string;
	alt?: string;
}

interface ImageSwapVariantProps {
	type: "image-swap";
	previewImages: string[];
	alt?: string;
	aspect?: "portrait" | "landscape" | "square";
	intervalMs?: number;
}

type VariantProps =
	| VideoVariantProps
	| ImageVariantProps
	| ImageSwapVariantProps;

interface Props {
	title: string;
	href: string;
	bgImage: string;
	variant: VariantProps;
	[key: string]: any;
}

const { title, href, bgImage, variant, ...rest } = Astro.props as Props;

const bgImageUrl = getCldImageUrl({
	src: bgImage,
	width: 1200,
	format: "auto",
});

const aspectClass = (() => {
	if (variant.type === "image-swap") {
		if (variant.aspect === "landscape") return "aspect-4/3";
		if (variant.aspect === "square") return "aspect-square";
		return "aspect-3/4";
	}
	return "aspect-4/5";
})();
---

<Widget
	class:list={[
		"flex max-w-[528px] flex-col gap-3 md:justify-between",
		"mb-12 md:mb-0",
	]}
	{...rest}
>
	<a
		href={href}
		class="block"
		aria-label={`View ${title}`}
		data-cursor-hover
		data-cursor-title={title}
	>
		<div
			class:list={[
				"group relative flex w-full items-center justify-center",
				aspectClass,
			]}
			style={{
				backgroundImage: `url(${bgImageUrl})`,
				backgroundSize: "cover",
			}}
		>
			{
				variant.type === "video" && (
					<video
						src={getCldVideoUrl({ src: variant.previewVideo })}
						loop
						muted
						autoplay
						playsinline
						class="relative z-10 h-auto w-[90%]"
					/>
				)
			}

			{
				variant.type === "image" && (
					<img
						src={getCldImageUrl({
							src: variant.previewImage,
							width: 1200,
							format: "auto",
						})}
						alt={variant.alt || title}
						loading="lazy"
						decoding="async"
						class="relative z-10 h-auto w-[90%] object-contain"
					/>
				)
			}

			{
				variant.type === "image-swap" && (
					<ImageSwapMedia
						client:load
						images={variant.previewImages}
						alt={variant.alt || title}
						intervalMs={variant.intervalMs}
						containerClassName="absolute inset-0 h-full w-full"
						className="relative z-10 h-auto w-[90%] object-contain"
					/>
				)
			}
		</div>
	</a>
</Widget>
