---
import BaseLayout from "./BaseLayout.astro";
import ProjectHeader from "@/components/nav/ProjectHeader";

interface Props {
	title: string;
	description: string;
	createdDate: string;
	lastUpdatedDate: string;
	types: string[];
	disableSidebarClickOutside?: boolean;
	floatingSidebar?: boolean;
}

const {
	title,
	description,
	createdDate,
	lastUpdatedDate,
	types,
	disableSidebarClickOutside,
	floatingSidebar = false,
} = Astro.props;
---

<BaseLayout title={title}>
	<div class="bg-base-50 flex h-dvh flex-col justify-between">
		<ProjectHeader
			client:only="react"
			projectTitle={title}
			projectDescription={description}
		>
			<slot />
		</ProjectHeader>

		<div
			class="relative z-0 min-h-0 flex-1 overflow-y-hidden p-4 md:overflow-x-auto"
			id="scroll-container"
		>
			<slot name="interactive">
				<div
					class="bg-base-100 flex h-full items-center justify-center p-0 md:p-4"
				>
					<div class="text-base-500 w-full text-center">
						<h2 class="mb-2 text-2xl font-medium">Interactive Content Area</h2>
						<p class="text-sm">Interactive components will be rendered here</p>
					</div>
				</div>
			</slot>
		</div>

		<script>
			import {
				setupHorizontalScrollSmoothing,
				setupVerticalScrollSmoothing,
			} from "../lib/scroll-smoothing";

			let currentCleanup: (() => void) | null = null;
			let mediaQuery: MediaQueryList | null = null;

			const setup = () => {
				if (currentCleanup) {
					currentCleanup();
					currentCleanup = null;
				}
				const isDesktop = mediaQuery
					? mediaQuery.matches
					: window.matchMedia("(min-width: 768px)").matches;
				currentCleanup = isDesktop
					? setupHorizontalScrollSmoothing("#scroll-container")
					: setupVerticalScrollSmoothing();
			};

			const attachMedia = () => {
				if (mediaQuery) return;
				mediaQuery = window.matchMedia("(min-width: 768px)");
				mediaQuery.addEventListener("change", setup);
			};

			document.addEventListener("astro:page-load", () => {
				attachMedia();
				setup();
			});

			document.addEventListener("astro:before-swap", () => {
				if (currentCleanup) {
					currentCleanup();
					currentCleanup = null;
				}
				if (mediaQuery) {
					mediaQuery.removeEventListener("change", setup);
					mediaQuery = null;
				}
			});
		</script>
	</div>
</BaseLayout>

<script></script>
