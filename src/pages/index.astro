---
export const prerender = false;

import PreviewWidget from "@/components/widgets/PreviewWidget.astro";
import ImageSwapWidget from "@/components/widgets/ImageSwapWidget.astro";
import HomeLayout from "@/layouts/HomeLayout.astro";
import { getCollection } from "astro:content";
import type { ContentTypeId, FilterType } from "@/lib/content-types";
import { AVAILABLE_FILTERS, getDefinitionById } from "@/lib/content-types";
import CursorFollower from "@/components/ui/cursor-follower";
import { getCldImageUrl } from "astro-cloudinary/helpers";

const works = await getCollection("works");

const allItems = works.sort(
	(a, b) => b.data.lastUpdatedDate.getTime() - a.data.lastUpdatedDate.getTime(),
);

const filterCounts: Record<FilterType, number> = (() => {
	const counts = new Map<FilterType, number>();
	for (const def of AVAILABLE_FILTERS.slice(1) as FilterType[]) {
		counts.set(def, 0);
	}
	for (const entry of works) {
		const types = (entry.data.types ?? ["interaction"]) as ContentTypeId[];
		for (const t of types) {
			const label = getDefinitionById(t).labelPlural as FilterType;
			counts.set(label, (counts.get(label) ?? 0) + 1);
		}
	}
	const total = works.length;
	return {
		All: total,
		...(Object.fromEntries(counts.entries()) as Record<FilterType, number>),
	};
})();

const urlParams = new URLSearchParams(
	import.meta.env.SSR ? "" : window.location.search,
);
const initialFilterParam = urlParams.get("filter") || "all";
const filterName =
	initialFilterParam.charAt(0).toUpperCase() + initialFilterParam.slice(1);

// Demo images reused from parallax-list
const swapDemoImages = [
	getCldImageUrl({ src: "bbva_mkmupf", width: 1200, format: "auto" }),
	getCldImageUrl({
		src: "cedrus-residential_rdpmyb",
		width: 1200,
		format: "auto",
	}),
	getCldImageUrl({ src: "icc-sydney_daohjj", width: 1200, format: "auto" }),
	getCldImageUrl({
		src: "john-cranko-school_xi8wyq",
		width: 1200,
		format: "auto",
	}),
];
---

<HomeLayout
	title={`${filterName} | Chayut`}
	scrollAreaId="main-scroll"
	filterCounts={filterCounts}
>
	<ImageSwapWidget
		title="Image Swap Demo"
		description="Rotating architecture images"
		images={swapDemoImages}
		types={["interaction"]}
		data-types="interaction"
		aspect="portrait"
		intervalMs={500}
		height="420px"
		position="top"
		style="opacity: 0; transform: translateY(10px); visibility: hidden;"
	/>
	{
		allItems.map((item) => {
			const itemDate = item.data.lastUpdatedDate;
			const formattedDate = itemDate.toLocaleDateString("en-US", {
				year: "numeric",
				month: "short",
				day: "numeric",
			});

			const typeTokens = (item.data.types ?? []) as ContentTypeId[];

			return (
				<PreviewWidget
					{...item.data}
					id={item.id}
					date={formattedDate}
					bgImage={item.data.bgImage || ""}
					previewVideo={item.data.previewVideo ?? ""}
					data-types={typeTokens.join(" ")}
					style="opacity: 0; transform: translateY(10px); visibility: hidden;"
				/>
			);
		})
	}
	<CursorFollower
		client:media="(pointer: fine) and (prefers-reduced-motion: no-preference)"
	/>
</HomeLayout>

<script>
	import type { FilterType } from "@/lib/content-types";
	import {
		filterFromUrlValue,
		urlFilterValueToTypeId,
	} from "@/lib/content-types";
	import { useFilterStore } from "@/lib/stores/filterStore";
	import { animate, stagger } from "motion";

	function updateTitle(urlFilterValue: string) {
		const titleFilter = filterFromUrlValue(urlFilterValue);
		document.title = `${titleFilter} | Chayut`;
	}

	function setWidgetVisibility(filter: string) {
		const filterToken = urlFilterValueToTypeId(filter) ?? filter;
		const allWidgets = document.querySelectorAll("[data-types]");
		const visibleWidgets: HTMLElement[] = [];

		allWidgets.forEach((widget) => {
			const widgetTypes = (widget.getAttribute("data-types") || "")
				.split(" ")
				.map((t) => t.trim())
				.filter(Boolean);

			if (filter === "all" || widgetTypes.includes(filterToken)) {
				widget.classList.remove("hidden");
				(widget as HTMLElement).style.visibility = "visible";
				visibleWidgets.push(widget as HTMLElement);
			} else {
				widget.classList.add("hidden");
			}
		});

		return visibleWidgets;
	}

	function animateWidgets(widgets: Element[]) {
		if (widgets.length === 0) return;
		const animation = animate(
			widgets,
			{
				opacity: [0, 1],
				y: [10, 0],
			},
			{
				duration: 0.3,
				ease: "easeOut",
				delay: stagger(0.08),
			},
		);
	}

	async function animateFilterChange(filter: string) {
		const allWidgets = document.querySelectorAll("[data-types]");

		const exitAnimation = animate(
			allWidgets,
			{
				opacity: [1, 0],
				y: [0, 10],
			},
			{
				duration: 0.2,
				ease: "easeOut",
				delay: stagger(0.05),
			},
		);

		await exitAnimation.finished;

		const visibleWidgets = setWidgetVisibility(filter);
		animateWidgets(visibleWidgets);
	}

	function handleFilterChange(event: CustomEvent<{ filter: string }>) {
		const filter = event.detail.filter;
		updateTitle(filter);
		animateFilterChange(filter);
	}

	function animateInitialLoad(filter: string) {
		const visibleWidgets = setWidgetVisibility(filter);
		animateWidgets(visibleWidgets);
	}

	function initializeFiltering() {
		const urlParams = new URLSearchParams(window.location.search);
		const initialFilterParam = urlParams.get("filter") || "all";

		updateTitle(initialFilterParam);
		animateInitialLoad(initialFilterParam);

		const storeFilter = filterFromUrlValue(initialFilterParam) as FilterType;
		useFilterStore.getState().setActiveFilter(storeFilter);

		document.addEventListener(
			"filter-changed",
			handleFilterChange as EventListener,
		);
	}

	function cleanup() {
		document.removeEventListener(
			"filter-changed",
			handleFilterChange as EventListener,
		);
	}

	document.addEventListener("astro:page-load", initializeFiltering);
	document.addEventListener("astro:before-swap", cleanup);
</script>
