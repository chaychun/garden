---
export const prerender = false;

import PreviewWidget from "@/components/widgets/PreviewWidget.astro";
import HomeLayout from "@/layouts/HomeLayout.astro";
import { getCollection } from "astro:content";
import type { ContentTypeId, FilterType } from "@/lib/content-types";
import { AVAILABLE_FILTERS, getDefinitionById } from "@/lib/content-types";
import CursorFollower from "@/components/ui/cursor-follower";
import type { WidgetUnion } from "@/lib/widgets-schema";

const projects = await getCollection("projects");
const externalProjects = await getCollection("externalProjects");

type UnifiedItem = {
	id: string;
	title: string;
	types: ContentTypeId[];
	lastUpdatedDate: Date;
	href: string;
	isExternal: boolean;
	widget?: WidgetUnion;
};

const allItems: UnifiedItem[] = [
	...projects.map((item) => ({
		id: item.id,
		title: item.data.title,
		types: (item.data.types ?? ["interaction"]) as ContentTypeId[],
		lastUpdatedDate: item.data.lastUpdatedDate,
		href: `/project/${encodeURIComponent(item.id)}/`,
		isExternal: false,
		widget: item.data.widget,
	})),
	...externalProjects.map((item) => ({
		id: item.id,
		title: item.data.title,
		types: (item.data.types ?? ["interaction"]) as ContentTypeId[],
		lastUpdatedDate: item.data.lastUpdatedDate,
		href: item.data.externalUrl,
		isExternal: true,
		widget: item.data.widget,
	})),
].sort((a, b) => b.lastUpdatedDate.getTime() - a.lastUpdatedDate.getTime());

const filterCounts: Record<FilterType, number> = (() => {
	const counts = new Map<FilterType, number>();
	for (const def of AVAILABLE_FILTERS.slice(1) as FilterType[]) {
		counts.set(def, 0);
	}
	for (const entry of allItems) {
		const types = (entry.types ?? ["interaction"]) as ContentTypeId[];
		for (const t of types) {
			const label = getDefinitionById(t).labelPlural as FilterType;
			counts.set(label, (counts.get(label) ?? 0) + 1);
		}
	}
	const total = allItems.length;
	return {
		All: total,
		...(Object.fromEntries(counts.entries()) as Record<FilterType, number>),
	};
})();

const urlParams = new URLSearchParams(
	import.meta.env.SSR ? "" : window.location.search,
);
const initialFilterParam = urlParams.get("filter") || "all";
const filterName =
	initialFilterParam.charAt(0).toUpperCase() + initialFilterParam.slice(1);
---

<HomeLayout
	title={`${filterName} | Chayut`}
	scrollAreaId="main-scroll"
	filterCounts={filterCounts}
>
	{
		allItems.map((item) => {
			const typeTokens = (item.types ?? []) as ContentTypeId[];
			const baseProps = {
				title: item.title,
				types: typeTokens,
				href: item.href,
				external: item.isExternal,
			};

			const animationStyle =
				"opacity: 0; transform: translateY(10px); visibility: hidden;";
			const dataTypes = typeTokens.join(" ");

			if (item.widget) {
				const { type, config } = item.widget;
				if (type === "video") {
					return (
						<PreviewWidget
							{...baseProps}
							bgImage={config.bgImage}
							bgFillClass={config.bgFillClass}
							variant={{
								type: "video",
								previewVideo: config.previewVideo,
								previewWidth: config.previewWidth,
							}}
							data-types={dataTypes}
							style={animationStyle}
						/>
					);
				}
				if (type === "image") {
					return (
						<PreviewWidget
							{...baseProps}
							bgImage={config.bgImage}
							bgFillClass={config.bgFillClass}
							variant={{
								type: "image",
								previewImage: config.previewImage,
								alt: config.alt,
								previewWidth: config.previewWidth,
							}}
							data-types={dataTypes}
							style={animationStyle}
						/>
					);
				}
				if (type === "image-swap") {
					return (
						<PreviewWidget
							{...baseProps}
							bgImage={config.bgImage}
							bgFillClass={config.bgFillClass}
							variant={{
								type: "image-swap",
								previewImages: config.previewImages,
								alt: config.alt,
								aspect: config.aspect,
								intervalMs: config.intervalMs,
								previewWidth: config.previewWidth,
							}}
							data-types={dataTypes}
							style={animationStyle}
						/>
					);
				}
			}

			return null;
		})
	}
	<CursorFollower
		client:media="(pointer: fine) and (prefers-reduced-motion: no-preference)"
	/>
</HomeLayout>

<script>
	import type { FilterType } from "@/lib/content-types";
	import {
		filterFromUrlValue,
		urlFilterValueToTypeId,
	} from "@/lib/content-types";
	import { useFilterStore } from "@/lib/stores/filterStore";
	import { animate, stagger } from "motion";

	function updateTitle(urlFilterValue: string) {
		const titleFilter = filterFromUrlValue(urlFilterValue);
		document.title = `${titleFilter} | Chayut`;
	}

	function setWidgetVisibility(filter: string) {
		const filterToken = urlFilterValueToTypeId(filter) ?? filter;
		const allWidgets = document.querySelectorAll("[data-types]");
		const visibleWidgets: HTMLElement[] = [];

		allWidgets.forEach((widget) => {
			const widgetTypes = (widget.getAttribute("data-types") || "")
				.split(" ")
				.map((t) => t.trim())
				.filter(Boolean);

			if (filter === "all" || widgetTypes.includes(filterToken)) {
				widget.classList.remove("hidden");
				(widget as HTMLElement).style.visibility = "visible";
				visibleWidgets.push(widget as HTMLElement);
			} else {
				widget.classList.add("hidden");
			}
		});

		return visibleWidgets;
	}

	function animateWidgets(widgets: Element[]) {
		if (widgets.length === 0) return;
		animate(
			widgets,
			{
				opacity: [0, 1],
				y: [10, 0],
			},
			{
				duration: 0.3,
				ease: "easeOut",
				delay: stagger(0.08),
			},
		);
	}

	async function animateFilterChange(filter: string) {
		const allWidgets = document.querySelectorAll("[data-types]");

		const exitAnimation = animate(
			allWidgets,
			{
				opacity: [1, 0],
				y: [0, 10],
			},
			{
				duration: 0.2,
				ease: "easeOut",
				delay: stagger(0.05),
			},
		);

		await exitAnimation.finished;

		const visibleWidgets = setWidgetVisibility(filter);
		animateWidgets(visibleWidgets);
	}

	function handleFilterChange(event: CustomEvent<{ filter: string }>) {
		const filter = event.detail.filter;
		updateTitle(filter);
		animateFilterChange(filter);
	}

	function animateInitialLoad(filter: string) {
		const visibleWidgets = setWidgetVisibility(filter);
		animateWidgets(visibleWidgets);
	}

	function initializeFiltering() {
		const urlParams = new URLSearchParams(window.location.search);
		const initialFilterParam = urlParams.get("filter") || "all";

		updateTitle(initialFilterParam);
		animateInitialLoad(initialFilterParam);

		const storeFilter = filterFromUrlValue(initialFilterParam) as FilterType;
		useFilterStore.getState().setActiveFilter(storeFilter);

		document.addEventListener(
			"filter-changed",
			handleFilterChange as EventListener,
		);
	}

	function cleanup() {
		document.removeEventListener(
			"filter-changed",
			handleFilterChange as EventListener,
		);
	}

	document.addEventListener("astro:page-load", initializeFiltering);
	document.addEventListener("astro:before-swap", cleanup);
</script>
