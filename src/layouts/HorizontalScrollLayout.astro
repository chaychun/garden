---
import BaseLayout from "./BaseLayout.astro";
import HomeSidebar from "@/components/HomeSidebar";
import HomeMobileTopBar from "@/components/HomeMobileTopBar";

interface Props {
	title: string;
	sidebar: string;
	scrollAreaId?: string;
}

const { title, sidebar, scrollAreaId = "main-scroll" } = Astro.props;
---

<BaseLayout title={title}>
	<div class="bg-base-50 min-h-screen">
		{
			sidebar === "home" && (
				<>
					<div class="fixed top-0 right-0 left-0 z-40 block md:hidden">
						<HomeMobileTopBar client:visible />
					</div>
				</>
			)
		}
		<div class="w-full pt-[64px] md:pt-0">
			<div
				class="md:flex md:h-dvh md:overflow-x-auto md:overflow-y-hidden"
				id="scroll-container"
				data-scroll-area-id={scrollAreaId}
			>
				{
					sidebar === "home" && (
						<div class="hidden md:sticky md:left-0 md:z-30 md:block md:flex-shrink-0">
							<HomeSidebar client:visible scrollAreaId={scrollAreaId} />
						</div>
					)
				}
				<div
					class="mx-auto flex max-w-[528px] flex-col md:max-w-none md:flex-row"
				>
					<slot />
				</div>
			</div>
		</div>
	</div>

	<script>
		import { gsap } from "gsap";
		import { ScrollToPlugin } from "gsap/ScrollToPlugin";

		gsap.registerPlugin(ScrollToPlugin);

		function setupHorizontalScrollSmoothing() {
			const scrollContainer = document.querySelector(
				"#scroll-container",
			) as HTMLElement;

			if (!scrollContainer) return;

			let smoothScrollTween: gsap.core.Tween | null = null;

			const handleWheel = (e: WheelEvent) => {
				const isDesktop = window.innerWidth >= 768;

				if (!isDesktop || e.shiftKey) return;

				e.preventDefault();

				const hasHorizontalScroll =
					scrollContainer.scrollWidth > scrollContainer.offsetWidth;
				const hasVerticalScroll =
					scrollContainer.scrollHeight > scrollContainer.offsetHeight;

				if (
					!e.shiftKey &&
					e.deltaY !== 0 &&
					hasHorizontalScroll &&
					!hasVerticalScroll
				) {
					if (smoothScrollTween) {
						smoothScrollTween.kill();
					}
					const currentScrollLeft = scrollContainer.scrollLeft;
					const scrollDelta = e.deltaY * 1.5;
					const targetScrollLeft = Math.max(
						0,
						Math.min(
							scrollContainer.scrollWidth - scrollContainer.offsetWidth,
							currentScrollLeft + scrollDelta,
						),
					);
					smoothScrollTween = gsap.to(scrollContainer, {
						scrollTo: { x: targetScrollLeft, autoKill: false },
						duration: 0.6,
						ease: "power2.out",
						onComplete: () => {
							smoothScrollTween = null;
						},
					});
				}
			};

			const handleShiftWheel = (e: WheelEvent) => {
				if (e.shiftKey && (e.deltaY !== 0 || e.deltaX !== 0)) {
					e.preventDefault();
					if (smoothScrollTween) {
						smoothScrollTween.kill();
					}
					const scrollDelta = (e.deltaY || e.deltaX) * 1.5;
					const currentScrollLeft = scrollContainer.scrollLeft;
					const targetScrollLeft = Math.max(
						0,
						Math.min(
							scrollContainer.scrollWidth - scrollContainer.offsetWidth,
							currentScrollLeft + scrollDelta,
						),
					);
					smoothScrollTween = gsap.to(scrollContainer, {
						scrollTo: { x: targetScrollLeft, autoKill: false },
						duration: 0.5,
						ease: "power2.out",
						onComplete: () => {
							smoothScrollTween = null;
						},
					});
				}
			};

			scrollContainer.addEventListener("wheel", handleWheel, {
				passive: false,
			});

			scrollContainer.addEventListener("wheel", handleShiftWheel, {
				passive: false,
			});

			return () => {
				scrollContainer.removeEventListener("wheel", handleWheel);
				scrollContainer.removeEventListener("wheel", handleShiftWheel);
				if (smoothScrollTween) {
					smoothScrollTween.kill();
				}
			};
		}

		// For faster loading on real page reload
		if (document.readyState === "loading") {
			document.addEventListener(
				"DOMContentLoaded",
				setupHorizontalScrollSmoothing,
			);
		} else {
			setupHorizontalScrollSmoothing();
		}

		// For subsequent loads on SPA navigation
		document.addEventListener(
			"astro:page-load",
			setupHorizontalScrollSmoothing,
		);
	</script>
</BaseLayout>
