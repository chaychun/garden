---
export const prerender = false;

import PreviewBlock from "@/components/blocks/PreviewBlock.astro";
import HomeLayout from "@/layouts/HomeLayout.astro";
import { getCollection } from "astro:content";

const works = await getCollection("works");

const allItems = works
	.filter((w) => (w.data.types ?? []).includes("interaction"))
	.sort(
		(a, b) =>
			b.data.lastUpdatedDate.getTime() - a.data.lastUpdatedDate.getTime(),
	);

const urlParams = new URLSearchParams(
	import.meta.env.SSR ? "" : window.location.search,
);
const initialFilterParam = urlParams.get("filter") || "all";
const filterName =
	initialFilterParam.charAt(0).toUpperCase() + initialFilterParam.slice(1);
---

<HomeLayout title={`${filterName} | Chayut`} scrollAreaId="main-scroll">
	{
		allItems.map((item) => {
			const itemDate = item.data.lastUpdatedDate;
			const formattedDate = itemDate.toLocaleDateString("en-US", {
				year: "numeric",
				month: "short",
				day: "numeric",
			});

			return (
				<PreviewBlock
					{...item.data}
					id={item.id}
					date={formattedDate}
					bgImage={item.data.bgImage || ""}
					previewVideo={item.data.previewVideo ?? ""}
					data-type="interactions"
					style="opacity: 0; transform: translateY(10px); visibility: hidden;"
				/>
			);
		})
	}
</HomeLayout>

<script>
	import { useFilterStore, type FilterType } from "@/lib/stores/filterStore";
	import { animate, stagger } from "motion";

	function updateTitle(filter: string) {
		const filterName = filter.charAt(0).toUpperCase() + filter.slice(1);
		document.title = `${filterName} | Chayut`;
	}

	function setBlockVisibility(filter: string) {
		const allBlocks = document.querySelectorAll("[data-type]");
		const visibleBlocks: HTMLElement[] = [];

		allBlocks.forEach((block) => {
			const blockType = block.getAttribute("data-type");

			if (filter === "all" || filter === blockType) {
				block.classList.remove("hidden");
				(block as HTMLElement).style.visibility = "visible";
				visibleBlocks.push(block as HTMLElement);
			} else {
				block.classList.add("hidden");
			}
		});

		return visibleBlocks;
	}

	function animateBlocks(blocks: Element[]) {
		if (blocks.length === 0) return;
		const animation = animate(
			blocks,
			{
				opacity: [0, 1],
				y: [10, 0],
			},
			{
				duration: 0.3,
				ease: "easeOut",
				delay: stagger(0.08),
			},
		);
	}

	async function animateFilterChange(filter: string) {
		const allBlocks = document.querySelectorAll("[data-type]");

		const exitAnimation = animate(
			allBlocks,
			{
				opacity: [1, 0],
				y: [0, 10],
			},
			{
				duration: 0.2,
				ease: "easeOut",
				delay: stagger(0.05),
			},
		);

		await exitAnimation.finished;

		const visibleBlocks = setBlockVisibility(filter);
		animateBlocks(visibleBlocks);
	}

	function handleFilterChange(event: CustomEvent<{ filter: string }>) {
		const filter = event.detail.filter;
		updateTitle(filter);
		animateFilterChange(filter);
	}

	function animateInitialLoad(filter: string) {
		const visibleBlocks = setBlockVisibility(filter);
		animateBlocks(visibleBlocks);
	}

	function initializeFiltering() {
		const urlParams = new URLSearchParams(window.location.search);
		const initialFilterParam = urlParams.get("filter") || "all";

		updateTitle(initialFilterParam);
		animateInitialLoad(initialFilterParam);

		const storeFilter = (
			initialFilterParam === "all"
				? "All"
				: initialFilterParam.charAt(0).toUpperCase() +
					initialFilterParam.slice(1)
		) as FilterType;
		useFilterStore.getState().setActiveFilter(storeFilter);

		document.addEventListener(
			"filter-changed",
			handleFilterChange as EventListener,
		);
	}

	function cleanup() {
		document.removeEventListener(
			"filter-changed",
			handleFilterChange as EventListener,
		);
	}

	document.addEventListener("astro:page-load", initializeFiltering);
	document.addEventListener("astro:before-swap", cleanup);
</script>
