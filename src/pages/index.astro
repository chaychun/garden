---
export const prerender = false;

import ArticleBlock from "@/components/blocks/ArticleBlock.astro";
import PreviewBlock from "@/components/blocks/PreviewBlock.astro";
import HorizontalScrollLayout from "@/layouts/HorizontalScrollLayout.astro";
import { getCollection } from "astro:content";

const interactions = await getCollection("interactions");
const articles = await getCollection("articles");

const allItems = [...interactions, ...articles].sort((a, b) => {
	const aDate =
		a.collection === "interactions" ? a.data.createdDate : a.data.date;
	const bDate =
		b.collection === "interactions" ? b.data.createdDate : b.data.date;
	return bDate.getTime() - aDate.getTime();
});
---

<HorizontalScrollLayout
	title="Test page"
	sidebar="home"
	scrollAreaId="main-scroll"
>
	{
		allItems.map((item) => {
			const itemDate =
				item.collection === "interactions"
					? item.data.createdDate
					: item.data.date;
			const formattedDate = itemDate.toLocaleDateString("en-US", {
				year: "numeric",
				month: "short",
				day: "numeric",
			});

			if (item.collection === "interactions") {
				return (
					<PreviewBlock
						{...item.data}
						id={item.id}
						date={formattedDate}
						bgImage={"bgImage" in item.data ? item.data.bgImage || "" : ""}
						previewImage={item.data.previewImage ?? ""}
						data-collection="interactions"
						style="opacity: 0; transform: translateY(10px); visibility: hidden;"
					/>
				);
			} else {
				return (
					<ArticleBlock
						{...item.data}
						date={formattedDate}
						link={`/articles/${item.id}/`}
						data-collection="articles"
						style="opacity: 0; transform: translateY(10px); visibility: hidden;"
					/>
				);
			}
		})
	}
</HorizontalScrollLayout>

<script>
	import { useFilterStore, type FilterType } from "@/lib/stores/filterStore";
	import { animate, stagger } from "motion";

	function setBlockVisibility(filter: string) {
		const allBlocks = document.querySelectorAll("[data-collection]");
		const visibleBlocks: HTMLElement[] = [];

		allBlocks.forEach((block) => {
			const blockCollection = block.getAttribute("data-collection");

			if (filter === "all" || filter === blockCollection) {
				block.classList.remove("hidden");
				(block as HTMLElement).style.visibility = "visible";
				visibleBlocks.push(block as HTMLElement);
			} else {
				block.classList.add("hidden");
			}
		});

		return visibleBlocks;
	}

	function animateBlocks(blocks: Element[]) {
		if (blocks.length === 0) return;
		const animation = animate(
			blocks,
			{
				opacity: [0, 1],
				y: [10, 0],
			},
			{
				duration: 0.3,
				ease: "easeOut",
				delay: stagger(0.08),
			},
		);
	}

	async function animateFilterChange(filter: string) {
		const allBlocks = document.querySelectorAll("[data-collection]");

		const exitAnimation = animate(
			allBlocks,
			{
				opacity: [1, 0],
				y: [0, 10],
			},
			{
				duration: 0.2,
				ease: "easeOut",
				delay: stagger(0.05),
			},
		);

		await exitAnimation.finished;

		const visibleBlocks = setBlockVisibility(filter);
		animateBlocks(visibleBlocks);
	}

	function handleFilterChange(event: CustomEvent<{ filter: string }>) {
		animateFilterChange(event.detail.filter);
	}

	function animateInitialLoad(filter: string) {
		const visibleBlocks = setBlockVisibility(filter);
		animateBlocks(visibleBlocks);
	}

	function initializeFiltering() {
		const urlParams = new URLSearchParams(window.location.search);
		const initialFilterParam = urlParams.get("filter") || "all";

		animateInitialLoad(initialFilterParam);

		const storeFilter = (
			initialFilterParam === "all"
				? "All"
				: initialFilterParam.charAt(0).toUpperCase() +
					initialFilterParam.slice(1)
		) as FilterType;
		useFilterStore.getState().setActiveFilter(storeFilter);

		document.addEventListener(
			"filter-changed",
			handleFilterChange as EventListener,
		);
	}

	function cleanup() {
		document.removeEventListener(
			"filter-changed",
			handleFilterChange as EventListener,
		);
	}

	document.addEventListener("astro:page-load", initializeFiltering);
	document.addEventListener("astro:before-swap", cleanup);
</script>
