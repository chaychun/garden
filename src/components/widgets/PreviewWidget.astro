---
import Widget from "@/components/widgets/Widget.astro";
import ImageSwapMedia from "@/components/widgets/image-swap-media";
import { getCldImageUrl, getCldVideoUrl } from "astro-cloudinary/helpers";

interface VideoVariantProps {
	type: "video";
	previewVideo: string;
	previewWidth?: number;
}

interface ImageVariantProps {
	type: "image";
	previewImage: string;
	alt?: string;
	previewWidth?: number;
}

interface ImageSwapVariantProps {
	type: "image-swap";
	previewImages: string[];
	alt?: string;
	aspect?: "portrait" | "landscape" | "square";
	intervalMs?: number;
	previewWidth?: number;
}

type VariantProps =
	| VideoVariantProps
	| ImageVariantProps
	| ImageSwapVariantProps;

interface Props {
	title: string;
	href: string;
	bgImage?: string;
	bgFillClass?: string;
	variant: VariantProps;
	external?: boolean;
	[key: string]: any;
}

const { title, href, bgImage, bgFillClass, variant, external, ...rest } =
	Astro.props as Props;

const bgImageUrl = bgImage
	? getCldImageUrl({ src: bgImage, width: 600, format: "auto" })
	: undefined;

const clampedWidth = (() => {
	const vw = variant.previewWidth;
	if (typeof vw !== "number" || Number.isNaN(vw) || vw <= 0) return 0.9;
	return Math.max(0, Math.min(1, vw));
})();
const previewWidthCss = `${(clampedWidth * 100).toFixed(4)}%`;
---

<Widget
	class:list={[
		"flex w-full shrink-0 flex-col gap-3 md:w-[528px] md:basis-[528px] md:justify-between",
		"mb-12 md:mb-0",
	]}
	{...rest}
>
	<a
		href={href}
		class="block"
		aria-label={`View ${title}`}
		data-cursor-hover
		data-cursor-title={title}
		data-cursor-external={external ? "true" : undefined}
	>
		<div
			class:list={[
				"group relative flex aspect-4/5 w-full items-center justify-center overflow-hidden",
				bgFillClass,
			]}
		>
			{
				bgImageUrl && (
					<div
						aria-hidden="true"
						class="absolute inset-0 z-0 bg-cover bg-center"
						style={{ backgroundImage: `url(${bgImageUrl})` }}
					/>
				)
			}
			{
				variant.type === "video" && (
					<video
						src={getCldVideoUrl({ src: variant.previewVideo })}
						loop
						muted
						autoplay
						preload="metadata"
						playsinline
						class="relative z-10 h-auto"
						style={{ width: previewWidthCss }}
					/>
				)
			}

			{
				variant.type === "image" && (
					<img
						src={getCldImageUrl({
							src: variant.previewImage,
							width: 600,
							format: "auto",
						})}
						alt={variant.alt || title}
						loading="lazy"
						decoding="async"
						class="relative z-10 h-auto object-contain"
						style={{ width: previewWidthCss }}
					/>
				)
			}

			{
				variant.type === "image-swap" && (
					<ImageSwapMedia
						client:load
						images={variant.previewImages.map((id) =>
							getCldImageUrl({
								src: id,
								width: 600,
								format: "auto",
							}),
						)}
						alt={variant.alt || title}
						intervalMs={variant.intervalMs}
						className="relative z-10 h-auto object-cover"
						imageStyle={{ width: previewWidthCss }}
						aspect={variant.aspect}
					/>
				)
			}
		</div>
	</a>
</Widget>
