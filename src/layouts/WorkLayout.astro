---
import WorkSidebar from "@/components/nav/WorkSidebar";
import BaseLayout from "./BaseLayout.astro";
import InfoDrawer from "@/components/nav/InfoDrawer";

interface Props {
	title: string;
	description: string;
	createdDate: string;
	lastUpdatedDate: string;
	types: string[];
	disableSidebarClickOutside?: boolean;
	floatingSidebar?: boolean;
}

const {
	title,
	description,
	createdDate,
	lastUpdatedDate,
	types,
	disableSidebarClickOutside,
	floatingSidebar = false,
} = Astro.props;
---

<BaseLayout title={title}>
	<div class="bg-base-50 flex h-dvh">
		<div
			class:list={[
				"hidden min-[824px]:block",
				floatingSidebar
					? "min-[824px]:absolute min-[824px]:inset-y-0 min-[824px]:left-0 min-[824px]:z-10"
					: "",
			]}
		>
			<WorkSidebar
				client:media="(min-width: 824px)"
				title={title}
				description={description}
				createdDate={createdDate}
				lastUpdatedDate={lastUpdatedDate}
				types={types}
				disableClickOutside={disableSidebarClickOutside}
			>
				<slot />
			</WorkSidebar>
		</div>
		<div
			id="content-area"
			data-floating-sidebar={floatingSidebar}
			class:list={[
				"flex w-full flex-1 flex-col overflow-hidden pl-0 transition-all duration-800 ease-out min-[824px]:overflow-auto",
				floatingSidebar ? "min-[824px]:ml-16" : "",
			]}
		>
			<slot name="interactive">
				<div
					class="bg-base-100 flex h-full items-center justify-center p-0 min-[824px]:p-4"
				>
					<div class="text-base-500 w-full text-center">
						<h2 class="mb-2 text-2xl font-medium">Interactive Content Area</h2>
						<p class="text-sm">Interactive components will be rendered here</p>
					</div>
				</div></slot
			>
			<div class="block min-[824px]:hidden">
				<InfoDrawer
					client:media="(max-width: 823px)"
					title={title}
					description={description}
					createdDate={createdDate}
					lastUpdatedDate={lastUpdatedDate}
					types={types}
				>
					<slot />
				</InfoDrawer>
			</div>
		</div>
	</div>
</BaseLayout>

<script>
	import { useSidebarStore } from "@/lib/stores/sidebarStore";

	let unsubscribe: (() => void) | undefined;

	function updateContentPadding() {
		const contentArea = document.getElementById("content-area");
		if (!contentArea) return;

		// Skip padding logic when using floating sidebar
		const floatingSidebar =
			contentArea.getAttribute("data-floating-sidebar") === "true";
		if (floatingSidebar) {
			contentArea.classList.remove("p-4");
			return;
		}

		// Only apply padding on desktop (custom 824px and up)
		const isDesktop = window.matchMedia("(min-width: 824px)").matches;
		if (!isDesktop) {
			contentArea.classList.remove("p-4");
			return;
		}

		try {
			const isExpanded = useSidebarStore.getState().isExpanded;
			contentArea.classList.toggle("p-4", isExpanded);
		} catch (error) {
			console.warn("Failed to update content padding:", error);
		}
	}

	function init() {
		try {
			useSidebarStore.getState().setExpanded(true);
		} catch (error) {
			console.warn("Failed to force open sidebar on interaction page:", error);
		}

		updateContentPadding();
		unsubscribe = useSidebarStore.subscribe(updateContentPadding);
		window.addEventListener("resize", updateContentPadding);
	}

	function cleanup() {
		if (unsubscribe) {
			unsubscribe();
			unsubscribe = undefined;
		}
		window.removeEventListener("resize", updateContentPadding);
	}

	document.addEventListener("astro:page-load", () => {
		init();
	});

	document.addEventListener("astro:before-swap", cleanup);
</script>
