---
import BaseLayout from "./BaseLayout.astro";
import TopBar from "../components/nav/TopBar";
import { FilterDescription } from "@/components/nav/FilterDescription";

interface Props {
	title: string;
	scrollAreaId?: string;
	filterCounts: Record<string, number>;
}

const { title, scrollAreaId = "main-scroll", filterCounts } = Astro.props;
---

<BaseLayout title={title}>
	<div class="bg-base-50 min-h-dvh">
		<div class="will-animate-fixed-safe opacity-0 transition-opacity duration-500 ease-out">
			<TopBar title="Chayut" filterCounts={filterCounts} client:only="react" />
		</div>

		<div
			class="grid h-dvh w-full grid-rows-[112px_auto_1fr] md:grid-rows-[100px_120px_1fr]"
		>
			<div class="row-start-1 px-3"></div>
			<div class="row-start-2 px-3">
				<div class="md:hidden">
					<div
						class="mx-auto mt-8 mb-12 grid grid-cols-4 p-3 md:max-w-none md:grid-cols-6 lg:grid-cols-5"
					>
						<div class="col-span-3 col-start-2">
							<div class="will-animate opacity-0 blur-sm translate-y-2 transition-all duration-500 ease-out">
								<FilterDescription
									className="text-base-700 text-xl leading-none"
									client:only="react"
								/>
							</div>
						</div>
					</div>
				</div>
				<div class="hidden md:block">
					<div
						class="mx-auto grid grid-cols-4 p-3 md:grid-cols-6 lg:grid-cols-5"
					>
						<div class="col-span-3 col-start-2 md:col-span-3 md:col-start-4">
							<div class="will-animate opacity-0 blur-sm translate-y-2 transition-all duration-500 ease-out">
								<FilterDescription
									className="text-base-700 text-xl leading-none"
									client:only="react"
								/>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div
				class="row-start-3 min-h-0 md:flex md:h-full md:overflow-x-auto md:overflow-y-hidden"
				id="scroll-container"
				data-scroll-area-id={scrollAreaId}
			>
				<div
					class="mx-auto flex max-w-[528px] flex-col md:mx-0 md:max-w-none md:flex-row"
				>
					<slot />
				</div>
			</div>
		</div>

		<script>
			import {
				setupHorizontalScrollSmoothing,
				setupVerticalScrollSmoothing,
			} from "../lib/scroll-smoothing";

			let currentCleanup: (() => void) | null = null;
			let mediaQuery: MediaQueryList | null = null;

			const setup = () => {
				if (currentCleanup) {
					currentCleanup();
					currentCleanup = null;
				}
				const isDesktop = mediaQuery
					? mediaQuery.matches
					: window.matchMedia("(min-width: 768px)").matches;
				currentCleanup = isDesktop
					? setupHorizontalScrollSmoothing("#scroll-container")
					: setupVerticalScrollSmoothing();
			};

			const attachMedia = () => {
				if (mediaQuery) return;
				mediaQuery = window.matchMedia("(min-width: 768px)");
				mediaQuery.addEventListener("change", setup);
			};

			const animateIn = () => {
				const fadeOnly = document.querySelectorAll(".will-animate-fixed-safe");
				fadeOnly.forEach(el => {
					requestAnimationFrame(() => {
						el.classList.remove("opacity-0");
						el.classList.add("opacity-100");
					});
				});

				const targets = document.querySelectorAll(".will-animate");
				targets.forEach(el => {
					requestAnimationFrame(() => {
						el.classList.remove("opacity-0", "blur-sm", "translate-y-2");
						el.classList.add("opacity-100", "blur-0", "translate-y-0");
					});
				});
			};

			document.addEventListener("astro:page-load", () => {
				attachMedia();
				setup();
				animateIn();
			});

			document.addEventListener("astro:before-swap", () => {
				if (currentCleanup) {
					currentCleanup();
					currentCleanup = null;
				}
				if (mediaQuery) {
					mediaQuery.removeEventListener("change", setup);
					mediaQuery = null;
				}
			});
		</script>
	</div>
</BaseLayout>
