---
import Badge from "@/components/Badge.astro";
import BlurOverlay from "@/components/ui/blur-overlay";
import Widget from "@/components/widgets/Widget.astro";
import { getCldImageUrl, getCldVideoUrl } from "astro-cloudinary/helpers";

interface Props {
	title: string;
	description: string;
	date: string;
	bgImage: string;
	previewVideo: string;
	types?: string[];
	tone?: "light" | "dark";
	id: string;
	[key: string]: any;
}

const {
	title,
	description,
	date,
	bgImage,
	previewVideo,
	types,
	tone = "light",
	id,
	...rest
} = Astro.props;

const bgImageUrl = getCldImageUrl({ src: bgImage, width: 600 });
const previewVideoUrl = getCldVideoUrl({ src: previewVideo });

const titleColorClass = tone === "light" ? "text-white" : "text-base-900";
const descriptionColorClass =
	tone === "light" ? "text-white/80" : "text-base-600";
const dateColorClass = tone === "light" ? "text-white" : "text-base-500";
---

<Widget
	class:list={[
		"flex max-w-[528px] flex-col gap-3 p-6 md:justify-between",
		"mb-12 md:mb-0",
	]}
	{...rest}
>
	<a
		href={`/work/${encodeURIComponent(id)}/`}
		class="block"
		aria-label={`View ${title}`}
		data-cursor-hover
		data-cursor-title={title}
	>
		<div
			class:list={[
				"group relative flex w-full items-center justify-center",
				"aspect-4/5",
			]}
			style={{
				backgroundImage: `url(${bgImageUrl})`,
				backgroundSize: "cover",
			}}
		>
			<BlurOverlay client:load />

			{
				types && types.length > 0 && (
					<div class="absolute top-2 right-2 hidden gap-2 opacity-0 transition-opacity duration-300 md:flex md:opacity-0 md:group-hover:opacity-100">
						{types.map((t) => (
							<Badge
								text={`${t.slice(0, 1).toUpperCase()}${t.slice(1)}`}
								variant={tone}
							/>
						))}
					</div>
				)
			}

			<div
				class:list={[
					"absolute top-2 left-2",
					"opacity-100 transition-opacity duration-300 md:opacity-0 md:group-hover:opacity-100",
					dateColorClass,
				]}
			>
				<span class="inline-block px-3 py-1 font-mono text-[10px] select-none">
					{date}
				</span>
			</div>

			<video
				src={previewVideoUrl}
				loop
				muted
				autoplay
				playsinline
				class="relative z-10 h-auto w-[90%]"></video>

			<div
				class="pointer-events-none absolute right-2 bottom-2 left-2 hidden flex-col gap-1 opacity-0 transition-opacity duration-300 md:flex md:opacity-0 md:group-hover:opacity-100"
			>
				<h2
					class:list={[
						"font-switzer text-base leading-tight font-medium",
						titleColorClass,
					]}
				>
					{title}
				</h2>
				<p
					class:list={[
						"font-switzer text-xs leading-none",
						descriptionColorClass,
					]}
				>
					{description}
				</p>
			</div>
		</div>
	</a>
	<div class="flex flex-col gap-2 md:hidden">
		<div class="flex items-center justify-between gap-2">
			<h2
				class="font-switzer text-base-900 min-w-0 truncate text-lg leading-tight font-medium"
			>
				{title}
			</h2>
			{
				types && types.length > 0 && (
					<div class="flex flex-none gap-2">
						{types.map((t) => (
							<Badge
								text={`${t.slice(0, 1).toUpperCase()}${t.slice(1)}`}
								variant="dark"
							/>
						))}
					</div>
				)
			}
		</div>
		<p class="font-switzer text-base-600 leading-none">
			{description}
		</p>
	</div>
</Widget>
