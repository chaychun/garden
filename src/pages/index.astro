---
export const prerender = false;

import ArticleBlock from "@/components/blocks/ArticleBlock.astro";
import PreviewBlock from "@/components/blocks/PreviewBlock.astro";
import HorizontalScrollLayout from "@/layouts/HorizontalScrollLayout.astro";
import { getCollection } from "astro:content";

const interactions = await getCollection("interactions");
const articles = await getCollection("articles");

const allItems = [...interactions, ...articles].sort(
	(a, b) => b.data.date.getTime() - a.data.date.getTime(),
);
---

<HorizontalScrollLayout
	title="Test page"
	sidebar="home"
	scrollAreaId="main-scroll"
>
	{
		allItems.map((item) => {
			const formattedDate = item.data.date.toLocaleDateString("en-US", {
				year: "numeric",
				month: "short",
				day: "numeric",
			});

			if (item.collection === "interactions") {
				return (
					<PreviewBlock
						{...item.data}
						date={formattedDate}
						bgImage={"bgImage" in item.data ? item.data.bgImage || "" : ""}
						previewImage={item.data.previewImage ?? ""}
						data-collection="interactions"
					/>
				);
			} else {
				return (
					<ArticleBlock
						{...item.data}
						date={formattedDate}
						link={`/articles/${item.id}/`}
						data-collection="articles"
					/>
				);
			}
		})
	}
</HorizontalScrollLayout>

<script>
	import { useFilterStore, type FilterType } from "@/lib/stores/filterStore";

	function initializeFiltering() {
		function applyFilter(filter: string) {
			const allBlocks = document.querySelectorAll("[data-collection]");

			allBlocks.forEach((block) => {
				const blockCollection = block.getAttribute("data-collection");

				if (filter === "all" || filter === blockCollection) {
					block.classList.remove("hidden");
				} else {
					block.classList.add("hidden");
				}
			});
		}

		function handleFilterChange(event: CustomEvent<{ filter: string }>) {
			applyFilter(event.detail.filter);
		}

		const urlParams = new URLSearchParams(window.location.search);
		const initialFilterParam = urlParams.get("filter") || "all";
		applyFilter(initialFilterParam);

		const mapping: Record<string, string> = {
			all: "All",
			interactions: "Interactions",
			articles: "Articles",
		};
		const storeFilter = (mapping[initialFilterParam] ?? "All") as FilterType;
		useFilterStore.getState().setActiveFilter(storeFilter);

		document.addEventListener(
			"filter-changed",
			handleFilterChange as EventListener,
		);
	}

	document.addEventListener("astro:page-load", initializeFiltering);
	document.addEventListener("DOMContentLoaded", initializeFiltering);
</script>
