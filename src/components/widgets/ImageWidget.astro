---
import Badge from "@/components/Badge.astro";
import Widget from "@/components/widgets/Widget.astro";
import { toCssHeight } from "@/lib/utils";
import { getCldImageUrl } from "astro-cloudinary/helpers";

interface Props {
	title: string;
	image: string;
	description?: string;
	types?: string[];
	id?: string;
	alt?: string;
	height?: string | number;
	position?: "top" | "bottom";
	[key: string]: any;
}

const { title, image, description, types, id, alt, height, position, ...rest } =
	Astro.props;

const imageUrl = getCldImageUrl({ src: image, width: 1200, format: "auto" });
const href = id ? `/work/${encodeURIComponent(id)}/` : undefined;

const mediaHeightCss = toCssHeight(height);
const mediaWrapperStyle = `--media-h:${mediaHeightCss};`;
const containerJustifyClass =
	position === "bottom"
		? "md:justify-end"
		: position === "top"
			? "md:justify-start"
			: "";
---

<Widget
	class:list={[
		"flex max-w-[528px] flex-col gap-3 p-6 md:max-w-none",
		containerJustifyClass,
		"mb-12 md:mb-0",
	]}
	{...rest}
>
	<div
		class:list={["md:h-[var(--media-h)] md:min-h-[300px]"]}
		style={mediaWrapperStyle}
	>
		{
			href ? (
				<a
					href={href}
					class="block md:h-full md:w-full"
					aria-label={`View ${title}`}
					data-cursor-hover
					data-cursor-title={title}
					data-cursor-types={(types ?? []).join(",")}
				>
					<img
						src={imageUrl}
						alt={alt || title}
						loading="lazy"
						decoding="async"
						class="h-auto w-full md:h-full md:w-auto md:max-w-full"
					/>
				</a>
			) : (
				<div
					class="block md:h-full md:w-full"
					data-cursor-hover
					data-cursor-title={title}
					data-cursor-types={(types ?? []).join(",")}
				>
					<img
						src={imageUrl}
						alt={alt || title}
						loading="lazy"
						decoding="async"
						class="h-auto w-full md:h-full md:w-auto md:max-w-full"
					/>
				</div>
			)
		}
	</div>

	<div class="flex flex-col gap-2 md:hidden">
		<div class="flex items-center justify-between gap-2">
			<h2
				class="font-switzer text-base-900 min-w-0 truncate text-lg leading-tight font-medium"
			>
				{title}
			</h2>
			{
				types && types.length > 0 && (
					<div class="flex flex-none gap-2">
						{types.map((t) => (
							<Badge
								text={`${t.slice(0, 1).toUpperCase()}${t.slice(1)}`}
								variant="dark"
							/>
						))}
					</div>
				)
			}
		</div>
		{
			description && (
				<p class="font-switzer text-base-600 leading-none">{description}</p>
			)
		}
	</div>
</Widget>
